<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>代码 on int main() { return 0; } </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>https://intmainreturn0.com/categories/%E4%BB%A3%E7%A0%81/</link>
    <language>zh-CN</language>
    
    
    <updated>Tue, 10 Oct 2017 17:16:07 &#43;0800</updated>
    
    <item>
      <title>Correct by Construction</title>
      <link>https://intmainreturn0.com/blog/correct-by-construction/</link>
      <pubDate>Tue, 10 Oct 2017 17:16:07 &#43;0800</pubDate>
      
      <guid>https://intmainreturn0.com/blog/correct-by-construction/</guid>
      <description>http://wiki.c2.com/?CorrectByConstruction 似乎早就不是什么新名词了 + 已经BuzzWord（？）化了……不过还是有必要了解一下 读http://assured-cloud-comput</description>
    </item>
    
    <item>
      <title>迁移博客到IPFS</title>
      <link>https://intmainreturn0.com/blog/%E8%BF%81%E7%A7%BB%E5%8D%9A%E5%AE%A2%E5%88%B0ipfs/</link>
      <pubDate>Sun, 24 Sep 2017 21:18:15 &#43;0800</pubDate>
      
      <guid>https://intmainreturn0.com/blog/%E8%BF%81%E7%A7%BB%E5%8D%9A%E5%AE%A2%E5%88%B0ipfs/</guid>
      <description>IPFS是最近非常热门的一个分布式网络系统，其主要支持以下功能： ipfs add，将本地的一个文件（夹）上传到一个去中心化的web中，返回一个和文件</description>
    </item>
    
    <item>
      <title>How Twitch uses PostgreSQL</title>
      <link>https://intmainreturn0.com/2017/09/20/how-twitch-uses-postgresql/</link>
      <pubDate>Wed, 20 Sep 2017 05:43:45 UTC</pubDate>
      
      <guid>https://intmainreturn0.com/2017/09/20/how-twitch-uses-postgresql/</guid>
      <description>https://blog.twitch.tv/how-twitch-uses-postgresql-c34aa9e56f58</description>
    </item>
    
    <item>
      <title>static vs inline vs static inline in C&#43;&#43;</title>
      <link>https://intmainreturn0.com/2017/09/03/static-vs-inline-vs-static-inline-in-c/</link>
      <pubDate>Sat, 02 Sep 2017 16:13:59 UTC</pubDate>
      
      <guid>https://intmainreturn0.com/2017/09/03/static-vs-inline-vs-static-inline-in-c/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>扇贝批量加词（Shell script）</title>
      <link>https://intmainreturn0.com/2017/05/10/%E6%89%87%E8%B4%9D%E6%89%B9%E9%87%8F%E5%8A%A0%E8%AF%8Dshell-script/</link>
      <pubDate>Wed, 10 May 2017 11:43:35 UTC</pubDate>
      
      <guid>https://intmainreturn0.com/2017/05/10/%E6%89%87%E8%B4%9D%E6%89%B9%E9%87%8F%E5%8A%A0%E8%AF%8Dshell-script/</guid>
      <description>先每行一个写入words.txt，然后网页端加一个，开发者工具 &amp;#8211; 网络 &amp;#8211; Copy as curl，得到如下形式： curl &#39;https://www.shanbay.com/bdc/vocabulary/add/batch/?words=clerical&amp;_=1494415650964&#39; -H &#39;Host: www.shanbay.com&#39; -H &#39;User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:53.0) Gecko/20100101 Firefox/53.0&#39; -H &#39;Accept: application/json, text/javascript, */*; q=0.01&#39; -H</description>
    </item>
    
    <item>
      <title>面试题2</title>
      <link>https://intmainreturn0.com/2017/04/17/%E9%9D%A2%E8%AF%95%E9%A2%982/</link>
      <pubDate>Mon, 17 Apr 2017 15:14:08 UTC</pubDate>
      
      <guid>https://intmainreturn0.com/2017/04/17/%E9%9D%A2%E8%AF%95%E9%A2%982/</guid>
      <description>&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>利用Docker的自定义网络来管理ip绑定</title>
      <link>https://intmainreturn0.com/2017/02/08/%E5%88%A9%E7%94%A8docker%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E7%BB%9C%E6%9D%A5%E7%AE%A1%E7%90%86ip%E7%BB%91%E5%AE%9A/</link>
      <pubDate>Wed, 08 Feb 2017 13:39:00 UTC</pubDate>
      
      <guid>https://intmainreturn0.com/2017/02/08/%E5%88%A9%E7%94%A8docker%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E7%BB%9C%E6%9D%A5%E7%AE%A1%E7%90%86ip%E7%BB%91%E5%AE%9A/</guid>
      <description>&lt;p&gt;Docker最近推出了&lt;code&gt;docker network&lt;/code&gt;的功能，允许用户自己创建网络。刚好手头合租了一台服务器想试试。&lt;/p&gt;

&lt;p&gt;这台服务器有4个公网ip（173.208.194.202,203,205,206/29）。我单独占了个173.208.194.205。我期待的效果是：这个docker network内创建的容器，默认会publish到173.208.194.205（即外界连.205:port也能访问到映射的容器）；并且容器内对外connect时，默认的localaddr也是.205。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>微信的一些网络方面的资料</title>
      <link>https://intmainreturn0.com/2017/02/03/327/</link>
      <pubDate>Fri, 03 Feb 2017 09:23:23 UTC</pubDate>
      
      <guid>https://intmainreturn0.com/2017/02/03/327/</guid>
      <description>微信客户端怎样应对弱网络 微信Mars — 移动互联网下的高质量网络连接探索 能控制的部分： 传输层 + 应用层 传输层：TCP在移动设备上可以优化：重传策</description>
    </item>
    
    <item>
      <title>spdlog的一些坑</title>
      <link>https://intmainreturn0.com/2017/02/01/spdlog%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</link>
      <pubDate>Tue, 31 Jan 2017 16:35:26 UTC</pubDate>
      
      <guid>https://intmainreturn0.com/2017/02/01/spdlog%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</guid>
      <description>&lt;p&gt;最近在用C++的这个spdlog库中遇到了一些坑……在这里写一下&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>某个新年游戏（？</title>
      <link>https://intmainreturn0.com/2017/01/27/%E6%9F%90%E4%B8%AA%E6%96%B0%E5%B9%B4%E6%B8%B8%E6%88%8F/</link>
      <pubDate>Fri, 27 Jan 2017 13:58:16 UTC</pubDate>
      
      <guid>https://intmainreturn0.com/2017/01/27/%E6%9F%90%E4%B8%AA%E6%96%B0%E5%B9%B4%E6%B8%B8%E6%88%8F/</guid>
      <description>http://codeworm96.coding.me/FooCard/ 其中的Hard mode，Bomb 和 bonus是我糊进去的，主体部分都 是@codeworm96 巨巨写的</description>
    </item>
    
    <item>
      <title>c10k-server方面的坑</title>
      <link>https://intmainreturn0.com/2017/01/26/c10k-server%E6%96%B9%E9%9D%A2%E7%9A%84%E5%9D%91/</link>
      <pubDate>Thu, 26 Jan 2017 07:18:10 UTC</pubDate>
      
      <guid>https://intmainreturn0.com/2017/01/26/c10k-server%E6%96%B9%E9%9D%A2%E7%9A%84%E5%9D%91/</guid>
      <description>&lt;p&gt;最近在写 &lt;a href=&#34;https://github.com/htfy96/c10k-server&#34;&gt;https://github.com/htfy96/c10k-server&lt;/a&gt;一个玩具服务器。初步是打算采用一个主线程只Accept，然后把Accept的FD放到某个Worker的Eventloop里。每个WorkerThread跑一个Eventloop监听并处理事件。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>最近看的一些关于Linux服务端方面的文章</title>
      <link>https://intmainreturn0.com/2017/01/22/%E6%9C%80%E8%BF%91%E7%9C%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E5%85%B3%E4%BA%8Elinux%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%96%B9%E9%9D%A2%E7%9A%84%E6%96%87%E7%AB%A0/</link>
      <pubDate>Sun, 22 Jan 2017 09:54:05 UTC</pubDate>
      
      <guid>https://intmainreturn0.com/2017/01/22/%E6%9C%80%E8%BF%91%E7%9C%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E5%85%B3%E4%BA%8Elinux%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%96%B9%E9%9D%A2%E7%9A%84%E6%96%87%E7%AB%A0/</guid>
      <description>多线程服务器的常用编程模型 &amp;#8211; 陈硕的Blog &amp;#8211; 博客频道 &amp;#8211; CSDN.NET 发布一个基于 Reactor 模式的 C++ 网络库 &amp;#8211; 陈硕的Blog &amp;#8211; 博客频道 &amp;#8211; CSDN.NET The C10K problem 关于SIGPIPE导</description>
    </item>
    
    <item>
      <title>HadoopInternals</title>
      <link>https://intmainreturn0.com/2017/01/17/hadoopinternals/</link>
      <pubDate>Tue, 17 Jan 2017 15:43:08 UTC</pubDate>
      
      <guid>https://intmainreturn0.com/2017/01/17/hadoopinternals/</guid>
      <description>http://ercoppa.github.io/HadoopInternals/AnatomyMapReduceJob.html#yarn-and-mapreduce-interaction</description>
    </item>
    
    <item>
      <title>写点C&#43;&#43; user defined literals的奇怪（正常）用途</title>
      <link>https://intmainreturn0.com/2017/01/08/%E5%86%99%E7%82%B9c-user-defined-literals%E7%9A%84%E5%A5%87%E6%80%AA%E6%AD%A3%E5%B8%B8%E7%94%A8%E9%80%94/</link>
      <pubDate>Sun, 08 Jan 2017 12:17:48 UTC</pubDate>
      
      <guid>https://intmainreturn0.com/2017/01/08/%E5%86%99%E7%82%B9c-user-defined-literals%E7%9A%84%E5%A5%87%E6%80%AA%E6%AD%A3%E5%B8%B8%E7%94%A8%E9%80%94/</guid>
      <description>&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;之前写的围棋程序的测试中，我们常常需要vector&amp;lt; { Player, Point } &amp;gt; pieceToPlace。问题在于，如果我们硬编码这个vector，可读性很差：&lt;/p&gt;

&lt;pre class=&#34;language-cpp&#34;&gt;pieceToPlace.emplace_back(Player::B, make_pair(2, 3));
pieceToPlace.emplace_back(Player::B, make_pair(2, 1));
pieceToPlace.emplace_back(Player::W, make_pair(1, 0));&lt;/pre&gt;

&lt;p&gt;通过User defined literal，我们可以做到这样：&lt;/p&gt;

&lt;pre class=&#34;language-cpp&#34;&gt;auto placeVec = getInput({
    {O,   1_B,   2_W,   4_W},
    {6_W, 3_B,   5_B,   7_W},
    {O,   O,     O,     8_B},
    {9_W, O,     O,     O}
});
for (auto &amp;ele : placeVec) 
{
    cout &amp;lt;&amp;lt; (ele.player == Player::B ? &#34;B&#34; : &#34;W&#34;) &amp;lt;&amp;lt; &#34; &#34; &amp;lt;&amp;lt; ele.point.first &amp;lt;&amp;lt; &#34;,&#34; &amp;lt;&amp;lt; ele.point.second &amp;lt;&amp;lt; endl; 
}
/*
B 0,1
W 0,2
B 1,1
W 0,3
B 1,2
W 1,0
W 1,3
B 2,3
W 3,0
*/&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>BakaGo</title>
      <link>https://intmainreturn0.com/2017/01/01/bakago/</link>
      <pubDate>Sat, 31 Dec 2016 16:08:25 UTC</pubDate>
      
      <guid>https://intmainreturn0.com/2017/01/01/bakago/</guid>
      <description>&lt;p&gt;BakaGo是作为期末AI作业的一个围棋Bot，由四位小组成员共同开发。主入口是&lt;a href=&#34;https://github.com/sjtu-ai-go/go-ai&#34;&gt;https://github.com/sjtu-ai-go/go-ai&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;名称来源：AlphaGo -&amp;gt; BetaGo(Github某项目，很弱) -&amp;gt; BataGo(拼写错误) -&amp;gt; BakaGo。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>

