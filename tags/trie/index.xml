<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>trie on int main() { return 0; }</title><link>https://intmainreturn0.com/tags/trie/</link><description>Recent content in trie on int main() { return 0; }</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 15 Jul 2016 04:54:17 +0000</lastBuildDate><atom:link href="https://intmainreturn0.com/tags/trie/index.xml" rel="self" type="application/rss+xml"/><item><title>TRASH A dynamic LC-trie and hash data structure</title><link>https://intmainreturn0.com/2016/07/15/trash-a-dynamic-lc-trie-and-hash-data-structure/</link><pubDate>Fri, 15 Jul 2016 04:54:17 +0000</pubDate><guid>https://intmainreturn0.com/2016/07/15/trash-a-dynamic-lc-trie-and-hash-data-structure/</guid><description>http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.96.2143 传统Trie的优化。 path compression: 连续若干个只有一个孩子节点可以压成一个 LC（level compression）：若某一节点下面第k层的子树都非空，</description></item></channel></rss>